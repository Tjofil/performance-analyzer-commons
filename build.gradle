/*
 * Copyright OpenSearch Contributors
 * SPDX-License-Identifier: Apache-2.0
 */

buildscript {
    ext {
        opensearch_version = System.getProperty("opensearch.version", "3.0.0-SNAPSHOT")
        isSnapshot = "true" == System.getProperty("build.snapshot", "true")
        buildVersionQualifier = System.getProperty("build.version_qualifier", "")
        buildDockerJdkVersion = System.getProperty("build.docker_jdk_ver", "11")

        // 3.0.0-SNAPSHOT -> 3.0.0.0-SNAPSHOT
        version_tokens = opensearch_version.tokenize('-')
        opensearch_build = version_tokens[0] + '.0'
        if (buildVersionQualifier) {
            opensearch_build += "-${buildVersionQualifier}"
        }
        if (isSnapshot) {
            opensearch_build += "-SNAPSHOT"
        }
    }

    repositories {
        mavenLocal()
        mavenCentral()
        maven { url "https://aws.oss.sonatype.org/content/repositories/snapshots" }
        maven { url "https://plugins.gradle.org/m2/" }
    }

    dependencies {
        classpath "org.opensearch.gradle:build-tools:${opensearch_version}"
        classpath group: 'com.google.guava', name: 'guava', version: '30.1-jre'
        classpath 'org.ajoberstar:gradle-git:0.2.3'
    }
}

plugins {
    id 'java'
    id 'application'
    id 'java-library'
    id 'maven-publish'
    id 'com.diffplug.spotless' version '5.11.0'
    id 'com.github.spotbugs' version '5.0.13'
}

spotbugsMain {
    excludeFilter = file("checkstyle/findbugs-exclude.xml")
    effort = 'max'
    ignoreFailures = true // TODO: Set this to false later as they are too many warnings to be fixed.

    reports {
        xml.enabled = false
        html.enabled = true
    }
}

spotbugsTest {
    ignoreFailures = true
}


repositories {
    mavenLocal()
    mavenCentral()
    maven { url "https://aws.oss.sonatype.org/content/repositories/snapshots" }
    maven { url "https://plugins.gradle.org/m2/" }
}

allprojects {
    group 'org.opensearch.performanceanalyzer.commons'
    version = opensearch_build
}

targetCompatibility = JavaVersion.VERSION_11
sourceCompatibility = JavaVersion.VERSION_11

compileJava {
    dependsOn spotlessApply
    JavaVersion targetVersion = JavaVersion.toVersion(targetCompatibility);
    if (targetVersion.isJava9Compatible()) {
        options.compilerArgs += ["--add-exports", "jdk.attach/sun.tools.attach=ALL-UNNAMED"]
        options.compilerArgs += ["--add-exports", "jdk.compiler/com.sun.tools.javac.parser=ALL-UNNAMED"]
    }
}

javadoc {
    JavaVersion targetVersion = JavaVersion.toVersion(targetCompatibility);
    if (targetVersion.isJava9Compatible()) {
        options.addStringOption("-add-exports", "jdk.attach/sun.tools.attach=ALL-UNNAMED")
        options.addStringOption("-add-exports", "jdk.compiler/com.sun.tools.javac.parser=ALL-UNNAMED")
    }
}

apply plugin: 'java'
apply plugin: 'jacoco'
apply plugin: 'signing'
apply plugin: 'maven-publish'
apply from: 'build-tools/coverage.gradle'

import org.opensearch.gradle.VersionProperties

dependencies {
    if (JavaVersion.current() <= JavaVersion.VERSION_1_8) {
        implementation files("${System.properties['java.home']}/../lib/tools.jar")
    }

    def versions = VersionProperties.versions

    def jacksonVersion = "${versions.jackson}"
    def jacksonDataBindVersion = "2.14.1"
    def junitVersion  = "4.13.1"
    def log4jVersion = "2.17.1"

    implementation "org.jooq:jooq:3.10.8"
    implementation "com.fasterxml.jackson.core:jackson-annotations:${jacksonVersion}"
    implementation "com.fasterxml.jackson.core:jackson-databind:${jacksonDataBindVersion}"
    implementation 'com.google.guava:guava:31.1-jre'
    implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: "${log4jVersion}"
    implementation group: 'org.apache.logging.log4j', name: 'log4j-core', version: "${log4jVersion}"


    testImplementation group: 'org.powermock', name: 'powermock-api-mockito2', version: '2.0.0'
    testImplementation group: 'org.powermock', name: 'powermock-module-junit4', version: '2.0.0'
    testImplementation group: 'org.mockito', name: 'mockito-core', version: '2.23.0'
    testImplementation group: 'org.powermock', name: 'powermock-core', version: '2.0.0'
    testImplementation group: 'org.powermock', name: 'powermock-api-support', version: '2.0.0'
    testImplementation group: 'org.powermock', name: 'powermock-module-junit4-common', version: '2.0.0'
    testImplementation group: 'org.javassist', name: 'javassist', version: '3.24.0-GA'
    testImplementation group: 'org.powermock', name: 'powermock-reflect', version: '2.0.0'
    testImplementation group: 'net.bytebuddy', name: 'byte-buddy', version: '1.9.3'
    testImplementation group: 'org.objenesis', name: 'objenesis', version: '3.0.1'
    testImplementation group: 'org.hamcrest', name: 'hamcrest-library', version: '2.1'
    testImplementation group: 'org.hamcrest', name: 'hamcrest', version: '2.1'
    testImplementation group: 'junit', name: 'junit', version: "${junitVersion}"
}

// TODO: remove once spotbugs upgrades to 4.7.4
configurations.each {
    c -> c.resolutionStrategy.dependencySubstitution {
        all { DependencySubstitution dependency ->
            if (dependency.requested.group == 'org.apache.bcel') {
                dependency.useTarget 'org.apache.bcel:bcel:6.6.1'
            }
        }
    }
}

compileJava {
    dependsOn spotlessApply
}

distZip {
    archiveName "performance-analyzer-commons-${version}.zip"
}


publishing {
    publications {
        maven(MavenPublication) {
            groupId = 'org.opensearch'
            artifactId = 'performanceanalyzer-commons'
            from components.java
        }
    }
}

test {
    testLogging {
        exceptionFormat "full"
        events "skipped", "passed", "failed", "started"
        showStandardStreams true
    }
}

distributions {
    main {
        contents {
            eachFile {
                it.path = it.path.replace("-$version/", '/')
            }
        }
    }
}

spotless {
    java {
        licenseHeaderFile(file('license-header'))
        googleJavaFormat('1.12.0').aosp()
        importOrder()
        removeUnusedImports()
        trimTrailingWhitespace()
        endWithNewline()

        // add support for spotless:off and spotless:on tags to exclude sections of code
        toggleOffOn()
    }
}

task sourcesJar(type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allJava
}

task javadocJar(type: Jar) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}
tasks.withType(Test) {
    jvmArgs('--add-opens=java.base/sun.nio.fs=ALL-UNNAMED')
    jvmArgs('--add-opens=java.base/java.nio.file=ALL-UNNAMED')
    jvmArgs('--add-opens=java.base/java.lang=ALL-UNNAMED')
    jvmArgs('--add-opens=java.base/java.util=ALL-UNNAMED')
    jvmArgs('--add-opens=java.xml/jdk.xml.internal=ALL-UNNAMED')
}

publishing {
    publications {
        shadow(MavenPublication) {
            groupId = 'org.opensearch'
            artifactId = 'performance-analyzer-commons'

            artifact sourcesJar
            artifact javadocJar

            pom {
                name = "OpenSearch Performance Analyzer Commons"
                packaging = "jar"
                url = "https://github.com/opensearch-project/performance-analyzer-commons"
                description = "OpenSearch Performance Analyzer Commons"
                scm {
                    connection = "scm:git@github.com:opensearch-project/performance-analyzer-commons.git"
                    developerConnection = "scm:git@github.com:opensearch-project/performance-analyzer-commons.git"
                    url = "git@github.com:opensearch-project/performance-analyzer-commons.git"
                }
                licenses {
                    license {
                        name = "The Apache License, Version 2.0"
                        url = "http://www.apache.org/licenses/LICENSE-2.0.txt"
                    }
                }
                developers {
                    developer {
                        id = "amazonwebservices"
                        organization = "Amazon Web Services"
                        organizationUrl = "https://aws.amazon.com"
                    }
                }
            }
        }
    }

    gradle.startParameter.setShowStacktrace(ShowStacktrace.ALWAYS)
    gradle.startParameter.setLogLevel(LogLevel.DEBUG)
}
